cmake_minimum_required(VERSION 2.4)

PROJECT (uwrapc)

ADD_DEFINITIONS(-D H5_USE_16_API)

IF(WIN32)
	ADD_DEFINITIONS(-D_HDF5USEDLL_)
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
ELSE(WIN32)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall  -W  -std=c99")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
ENDIF(WIN32)

FIND_PATH (SPIMAGE_INCLUDE_DIR spimage.h PATHS ENV SPIMAGE_INC NO_DEFAULT_PATH)
FIND_PATH (SPIMAGE_INCLUDE_DIR spimage.h PATHS /usr/include /sw/include ENV SPIMAGE_INC)
FIND_PATH (TIFF_INCLUDE_DIR tiff.h PATHS ENV TIFF_INC NO_DEFAULT_PATH)
FIND_PATH (TIFF_INCLUDE_DIR tiff.h PATHS /usr/include /sw/include)
FIND_PATH (HDF5_INCLUDE_DIR hdf5.h ENV HDF5_INC NO_DEFAULT_PATH)
FIND_PATH (HDF5_INCLUDE_DIR hdf5.h PATHS /usr/include /sw/include)


FIND_PATH (FFTW3_INCLUDE_DIR fftw3.h PATHS ENV FFTW_INC NO_DEFAULT_PATH)
FIND_PATH (FFTW3_INCLUDE_DIR fftw3.h PATHS /usr/include /sw/include)
FIND_PATH (PNG_INCLUDE_DIR png.h PATHS ENV PNG_INC NO_DEFAULT_PATH)
FIND_PATH (PNG_INCLUDE_DIR png.h PATHS /usr/include /sw/include)
FIND_PATH (MATHEVAL_INCLUDE_DIR matheval.h PATHS ENV MATHEVAL_INC NO_DEFAULT_PATH)
FIND_PATH (MATHEVAL_INCLUDE_DIR matheval.h PATHS /usr/include /sw/include)


FIND_LIBRARY (SPIMAGE_LIBRARY spimage PATHS ENV SPIMAGE_LIB NO_DEFAULT_PATH)
FIND_LIBRARY (SPIMAGE_LIBRARY spimage PATHS /usr/lib /sw/lib)
FIND_LIBRARY (HDF5_LIBRARY hdf5 PATHS ENV HDF5_LIB NO_DEFAULT_PATH)
FIND_LIBRARY (HDF5_LIBRARY hdf5 PATHS /usr/lib /sw/lib)
FIND_LIBRARY (SZIP_LIBRARY sz PATHS ENV SZIP_LIB NO_DEFAULT_PATH)
FIND_LIBRARY (SZIP_LIBRARY sz PATHS /usr/lib /sw/lib)


FIND_LIBRARY (TIFF_LIBRARY tiff PATHS ENV TIFF_LIB NO_DEFAULT_PATH)
FIND_LIBRARY (TIFF_LIBRARY tiff /usr/lib /sw/lib)
FIND_LIBRARY (PNG_LIBRARY png PATHS ENV PNG_LIB NO_DEFAULT_PATH)
FIND_LIBRARY (PNG_LIBRARY png /usr/lib /sw/lib)
FIND_LIBRARY (MATH_LIBRARY m PATHS /usr/lib /sw/lib)
FIND_LIBRARY (C_LIBRARY c /usr/lib /sw/lib)
FIND_LIBRARY (Z_LIBRARY z /usr/lib /sw/lib)
FIND_LIBRARY (JPEG_LIBRARY jpeg PATHS ENV JPEG_LIB NO_DEFAULT_PATH)
FIND_LIBRARY (JPEG_LIBRARY jpeg PATHS /usr/lib /sw/lib)
FIND_LIBRARY (MATHEVAL_LIBRARY matheval PATHS ENV MATHEVAL_LIB NO_DEFAULT_PATH)
FIND_LIBRARY (MATHEVAL_LIBRARY matheval PATHS /usr/lib /sw/lib)

SET(DMALLOC_USE OFF CACHE BOOL "If ON link to dmalloc library if possible.")
SET(DOUBLE_PRECISION OFF CACHE BOOL "If ON use double precision. Otherwise use single precision")
SET(DEBUG_MEM OFF CACHE BOOL "If ON use memory debugging code.")

SET(USE_QT4 OFF CACHE BOOL "If ON use Qt4.")


IF(DMALLOC_USE)
		    FIND_LIBRARY (DMALLOC_LIBRARY dmalloc /usr/lib /sw/lib)
		    FIND_PATH (DMALLOC_INCLUDE_DIR dmalloc.h PATHS /usr/include /sw/include)	
		    IF(DMALLOC_LIBRARY)
			ADD_DEFINITIONS(-D_USE_DMALLOC)
			SET(LINK_TO_DMALLOC 1)
		    ENDIF(DMALLOC_LIBRARY)
ENDIF(DMALLOC_USE)


IF(DOUBLE_PRECISION)
	ADD_DEFINITIONS(-D_SP_DOUBLE_PRECISION)
ELSE(DOUBLE_PRECISION)	
	ADD_DEFINITIONS(-D_SP_SINGLE_PRECISION)
ENDIF(DOUBLE_PRECISION)

IF(DEBUG_MEM)
	ADD_DEFINITIONS(-D_SP_DEBUG_MEM)
ENDIF(DEBUG_MEM)


IF(WIN32)
FIND_LIBRARY (FFTW3_LIBRARY fftw3 ENV FFTW_LIB NO_DEFAULT_PATH)
FIND_LIBRARY (FFTW3_LIBRARY fftw3 /usr/lib /sw/lib ENV FFTW_LIB)
ELSE(WIN32)
FIND_LIBRARY (FFTW3_LIBRARY fftw3 ENV FFTW_LIB NO_DEFAULT_PATH)
FIND_LIBRARY (FFTW3_LIBRARY fftw3 /usr/lib /sw/lib ENV FFTW_LIB)
FIND_LIBRARY (FFTW3F_LIBRARY fftw3f ENV FFTW_LIB NO_DEFAULT_PATH)
FIND_LIBRARY (FFTW3F_LIBRARY fftw3f /usr/lib /sw/lib ENV FFTW_LIB)
FIND_LIBRARY (FFTW3F_THREADS_LIBRARY fftw3f_threads  ENV FFTW_LIB NO_DEFAULT_PATH)	
FIND_LIBRARY (FFTW3F_THREADS_LIBRARY fftw3f_threads /usr/lib /sw/lib ENV FFTW_LIB)	
FIND_LIBRARY (PTHREAD_LIBRARY pthread /usr/lib /sw/lib)	
ENDIF(WIN32)
SET(FFTW_LIBRARY ${FFTW3_LIBRARY} ${FFTW3F_LIBRARY} ${FFTW3F_THREADS_LIBRARY} ${PTHREAD_LIBRARY})


SET(QT_USE_QTGUI TRUE)
SET(QT_USE_QTOPENGL TRUE)
SET(QT_USE_QTNETWORK TRUE)
IF(USE_QT4)
  INCLUDE(FindQt4)
ENDIF(USE_QT4)

IF(QT_QTCORE_FOUND AND QT_QTNETWORK_FOUND)
	ADD_DEFINITIONS(-DNETWORK_SUPPORT)
ENDIF(QT_QTCORE_FOUND AND QT_QTNETWORK_FOUND)

IF(WIN32)
SET (GETOPT utils/getopt.c)
ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
ELSE(WIN32)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wall -std=c99")
ENDIF(WIN32)

IF(QT4_FOUND AND QT_USE_FRAMEWORKS)
  LIST(APPEND LIBRARY_LIST ${SPIMAGE_LIBRARY}  ${HDF5_LIBRARY} ${SZIP_LIBRARY} ${TIFF_LIBRARY} ${FFTW_LIBRARY} ${JPEG_LIBRARY} ${Z_LIBRARY} ${MATH_LIBRARY} ${C_LIBRARY})
ELSE(QT4_FOUND AND QT_USE_FRAMEWORKS)
  LIST(APPEND LIBRARY_LIST ${SPIMAGE_LIBRARY}  ${HDF5_LIBRARY} ${SZIP_LIBRARY} ${TIFF_LIBRARY} ${PNG_LIBRARY} ${FFTW_LIBRARY} ${JPEG_LIBRARY} ${Z_LIBRARY} ${MATH_LIBRARY} ${C_LIBRARY})
ENDIF(QT4_FOUND AND QT_USE_FRAMEWORKS)
IF(QT4_FOUND)
	INCLUDE_DIRECTORIES(${SPIMAGE_INCLUDE_DIR} ${TIFF_INCLUDE_DIR} ${HDF5_INCLUDE_DIR} ${FFTW3_INCLUDE_DIR} ${PNG_INCLUDE_DIR} ${QT_INCLUDES} saddle libconfig Hawk)
	LIST(APPEND LIBRARY_LIST  ${QT_QTCORE_LIBRARY} ${QT_QTNETWORK_LIBRARY})
ELSE(QT4_FOUND)
	INCLUDE_DIRECTORIES(${SPIMAGE_INCLUDE_DIR} ${TIFF_INCLUDE_DIR} ${HDF5_INCLUDE_DIR} ${FFTW3_INCLUDE_DIR} ${PNG_INCLUDE_DIR}  saddle libconfig)
ENDIF(QT4_FOUND)

IF(QT4_FOUND)
QT_WRAP_CPP(uwrapc project_moc_files  communicator.h client_decoder.h decoder.h sender.h)
ENDIF(QT4_FOUND)

SET(UWRAPC_OBJ uwrapc.c configuration.c support.c algorithms.c log.c saddle/minmaxtau.c saddle/minmaxL.c ${project_moc_files})
LIST(APPEND UWRAPC_OBJ communicator.cpp network_communication.cpp libconfig/libconfig.c libconfig/scanner.c libconfig/grammar.c)
LIST(APPEND UWRAPC_OBJ client_decoder.cpp decoder.cpp metadata.c sender.cpp)

ADD_EXECUTABLE(uwrapc ${UWRAPC_OBJ})
ADD_EXECUTABLE(restore_image restore_image.c configuration.c support.c algorithms.c log.c saddle/minmaxtau.c saddle/minmaxL.c libconfig/libconfig.c libconfig/scanner.c libconfig/grammar.c metadata.c )
ADD_EXECUTABLE(process_image process_image.c ${GETOPT})
ADD_EXECUTABLE(post_process post_process.c ${GETOPT})



IF(LINK_TO_DMALLOC)
LIST(APPEND LIBRARY_LIST ${DMALLOC_LIBRARY})
ENDIF(LINK_TO_DMALLOC)

ADD_SUBDIRECTORY(utils)
IF(QT4_FOUND)
ADD_SUBDIRECTORY(Hawk)
ADD_SUBDIRECTORY(Preview)
ADD_SUBDIRECTORY(Look)
ENDIF(QT4_FOUND)
ADD_SUBDIRECTORY(saddle)
ADD_SUBDIRECTORY(tests)


TARGET_LINK_LIBRARIES(uwrapc ${LIBRARY_LIST})
TARGET_LINK_LIBRARIES(process_image ${LIBRARY_LIST})
TARGET_LINK_LIBRARIES(post_process ${LIBRARY_LIST})
TARGET_LINK_LIBRARIES(restore_image ${LIBRARY_LIST})

INSTALL(TARGETS uwrapc process_image post_process restore_image
            RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
            LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
            ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
