hawk-convert(1)
===============

NAME
----
hawk-convert - Converts files between different file formats


SYNOPSIS
--------
[verse]
'hawk convert' <input file> <output file>

DESCRIPTION
-----------
Converts images from one file format to another. It infers the both
the input and output file format from the filenames of the *<input file>*
and *<output file>*. It tries to preserve as much information
as possible but for many formats there will be a substantial loss of
information. Certain output formats, such as *PNG*, do not attempt to
preserve the input information but instead adapt it to the output
format.

OPTIONS
-------
*<input file>*::
The filename of the file to convert.

*<output file>*::
The filename where the output file will be created.

*--version*::
	Prints the Hawk package version.

*--help*::
	Prints the synopsis along with a list and short explanation
  of the possible commands. When given a <command> it will show
  the man page of that <command>, for example *hawk --help convert*
  will show the man page for hawk-convert.

FILE FORMATS
------------
The following file formats are supported. All filename ending comparisons
are *case insensitive*.

INPUT ONLY FORMATS
~~~~~~~~~~~~~~~~~~

*SMV Files*::
	Filenames ending with *.smv* are assumed to be Super Marty View (SMV)
	files, used by some early CCD-based X-ray detectors.


OUTPUT ONLY FORMATS
~~~~~~~~~~~~~~~~~~~

*VTK Files*::
	Filenames ending with *.vtk* are assumed to be VTK files. These are files
	used for 3D data visualization. The data will be written as a dataset of
	structured points in ASCII format. Only the absolute value of each pixel 
	will be written to the file. No metadata support.

*CSV Files*::
	Filenames ending with *.csv* are assumed to be CSV files. This format only
	support 2D images. The output file will have 6 columns corresponding to the
	x,y pixel position and the complex pixel value in both radial (amplitude and 
	phase) and cartesian (real and imaginary part) notation. No metadata support.

*XPLOR Files*::
	Filenames ending with *.xplor* are assumed to be XPLOR files. This format
	only support 3D images. The output file will contain the absolute value of
	each pixel as a 3D electron density map, suitable for visualization in
	crystallography packages such as PyMOL. No metadata support.



INPUT/OUTPUT FORMATS
~~~~~~~~~~~~~~~~~~~~


*Hawk H5 Files*::
	Filenames ending with *.h5* are assumed to be traditional Hawk H5 files. 
	This format supports both 2D and 3D floating point datasets as well as
	extensive metadata including mask, and a variety of experimental parameters.

*PNG Files*::
	Filenames ending with *.png* are assumed to be PNG files. This format only
	supports 2D images. As an input only 8-bit monochromatic images are accepted.
	When PNG files are used as an output format the absolute value of the input
	data is converted into a color image using the Jet colormap and that image is
	then written into the file. No metadata support.

*TIFF Files*::
	Filenames ending with *.tif* or *.tiff* are assumed to be TIFF files. 8-bit,
	16-bit and 32-bit integer and 32-bit floating point input files are supported.
	Output files will always be written in 32-bit floating point format. No metadata
	support.

*CXI Files*::
	Filenames ending with *.cxi* are assumed to be CXI Files. As an input only the
	first entry of a possibly multi-entry file will be converted. Currently no metadata
	is converted, even when the output files support it. As an output format a file
	with a single entry will be created containing the input data along with any 
	possible metadata.

*MRC Files*::
	Filenames ending with *.mrc* or *.map* are assumed to be MRC Files. These are
	cryo-electron microscopy density maps. 16-bit integer and 32-bit floating point
	input files are supported. As an output 32-bit floating point files will be created
	containing the real part of the input data. CCP4 electron density maps can also be
	read as an MRC files.




//FURTHER DOCUMENTATION
//---------------------

// We could use some


EXAMPLES
-------

*hawk convert image.tiff image.cxi*

Will read *image.tiff* and covert it into a CXI file named *image.cxi*.
